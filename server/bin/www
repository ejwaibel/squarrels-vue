#!/usr/bin/env node
require('dotenv').config();
const config = require('../config/config');
const logger = config.logger('www');

/**
 * Module dependencies.
 */
const appServe = require('../app-server');
const app = appServe.app;
const sessionParser = appServe.sessionParser;
const sessionStore = appServe.sessionStore;
const debug = require('debug')('squarrels:server');
const http = require('http');
// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '3000');

app.set('port', port);

/**
 * Create HTTP server & websocket connection.
 */
const server = http.createServer(app);
// global.wss = new WebSocket.Server({ path: '/squarrels', port: 1337, server });

require('./websocket')(server, sessionParser, sessionStore);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, process.env.SERVER);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	const bind = (typeof port === 'string' ? 'Pipe ' : 'Port ') + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			logger.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;

		case 'EADDRINUSE':
			logger.error(bind + ' is already in use');
			process.exit(1);
			break;

		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;

	debug('Listening on ' + bind);
}
