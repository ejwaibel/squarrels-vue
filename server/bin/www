#!/usr/bin/env node

/**
 * Module dependencies.
 */

var appServe = require('../app-server'),
    app = appServe.app,
    sessionParser = appServe.sessionParser,
    sessionStore = appServe.sessionStore,
    config = require('../config/config'),
    debug = require('debug')('squarrels:server'),
    http = require('http'),
    logger = config.logger('www'),
    // Get port from environment and store in Express.
    port = normalizePort(process.env.PORT || '3000');

app.set('port', port);

/**
 * Create HTTP server & websocket connection.
 */
let server = http.createServer(app);
// global.wss = new WebSocket.Server({ path: '/squarrels', port: 1337, server });
require('../websocket')(server, sessionParser, sessionStore);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;

        case 'EADDRINUSE':
            logger.error(bind + ' is already in use');
            process.exit(1);
            break;

        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address(),
        bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

    debug('Listening on ' + bind);
}