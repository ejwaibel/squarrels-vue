#!/usr/bin/env node

require('dotenv').config();
const config = require('../config/config');
const logger = config.logger('www');
const path = require('path');

const mongooseSeed = require('../lib/MongooseSeed')({
	Promise: require('q').Promise,
	logger,
});

mongooseSeed
	.connect(`${config.mongodbUri}/squarrels`)
	.then(async() => {
		const populateOpts = { populateExisting: false };

		mongooseSeed.loadModels(path.join(__dirname, '../models'));

		if (process.env.CLEAR_MODELS === true) {
			await mongooseSeed.clearAll();
		}

		try {
			await mongooseSeed.populate(path.join(__dirname, '../config/seeds'), populateOpts);
		} catch (err) {
			logger.error(err);
		}
	})
	.catch(function(err) {
		logger.error('mongodb connection error', err);
		process.exit(1);
	});

/**
 * Module dependencies.
 */
const appServe = require('./app-server');
const http = require('http');

/**
 * Normalize a port into a number, string, or false.
 *
 * @param {number|string} val Value to be normalized
 * @returns {number|string|boolean} Value to be used for the port
 */
const normalizePort = function(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
};

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '4200');

appServe.set('trust proxy', 1);
appServe.set('port', port);

/**
 * Create HTTP server & websocket connection.
 */
const server = http.createServer(appServe);

server.on('close', res => {
	logger.warn(`Connection closed - ${res}`);
});
server.on('connect', onConnect);
server.on('error', onError);
server.on('listening', onListening);

require('./app-websocket')(server);

/*
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, process.env.SERVER);

function onConnect() {
	logger.info(`Connected to ${process.env.SERVER}:${port}!`);
}

// Event listener for HTTP server "error" event.
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	const bind = (typeof port === 'string' ? 'Pipe ' : 'Port ') + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			logger.error(`${bind} requires elevated privileges`);
			process.exit(1);
			break;

		case 'EADDRINUSE':
			logger.error(`${bind} is already in use`);
			process.exit(1);
			break;

		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;

	logger.info(`Listening on ${bind}`);
}
